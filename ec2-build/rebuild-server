#!/bin/bash

# Simple function to exit with a message in the case of failure.
function error_exit
{
  echo ''
  echo "$1" 1>&2
  exit 1
}

# Pull in file containing variables to be used in this build.
VARS_FILE="$1"

if [ -z "$VARS_FILE" ]; then
  echo "Please pass a variable file as a parameter. See ec-params.sample to get started."
  exit 1
fi

if [ ! -f "$VARS_FILE" ]; then
  echo "The variable file '$VARS_FILE' was not found."
  exit 1
fi

source "$VARS_FILE"

# The following are common vars that could be moved into other build-specific files if required.
KEY_NAME='tw'
RUNNING_TIMEOUT='300'
CONTROLLER_INSTANCE_TYPE='m1.small'
CLASSROOM_INSTANCE_TYPE='t1.micro'
REGION='us-east-1'
BASE_DIR=`pwd`
AMI='ami-3d4ff254'
ID_FILE="${HOME}/.ssh/tw.pem"
ANS_ARGS="-c ssh -s --timeout=$RUNNING_TIMEOUT --private-key=$ID_FILE --inventory-file=$BASE_DIR/ec2-hostname"
SLEEP='3'
TW_DIR='/var/trainingwheels'

echo ''
echo "Ansible arguments: $ANS_ARGS"

# If Ansible ever gets a good euca2ools module, we may be able to move some of this out of bash.
echo ''
echo 'Finding all existing build instances...'
OBSOLETE_INSTANCES=`euca-describe-instances --filter tag-value=$TAG_VAL | grep INSTANCE | cut -f 2`

echo ''
echo "The following instances will be terminated:"
echo "$OBSOLETE_INSTANCES"
euca-terminate-instances $OBSOLETE_INSTANCES

echo ''
echo "Waiting for all build instances to be shut down..."
timeout $RUNNING_TIMEOUT sh -c "while euca-describe-instances --filter tag-value=$TAG_VAL | grep INSTANCE | grep -qv terminated; do echo 'checking...'; sleep $SLEEP; done" \
|| error_exit "server didn't shutdown within $RUNNING_TIMEOUT seconds"

echo ''
echo 'Classroom: Creating new instance...'
CLASSROOM_INSTANCE_ID=`euca-run-instances --key $KEY_NAME --region $REGION --instance-type $CLASSROOM_INSTANCE_TYPE --group default $AMI | grep INSTANCE | cut -f 2`

echo ''
echo 'Controller: Creating new instance...'
CONTROLLER_INSTANCE_ID=`euca-run-instances --key $KEY_NAME --region $REGION --instance-type $CONTROLLER_INSTANCE_TYPE --group default $AMI | grep INSTANCE | cut -f 2`

echo ''
echo "Controller: Waiting for the instance to have state 'running'..."
timeout $RUNNING_TIMEOUT sh -c "while ! euca-describe-instances $CONTROLLER_INSTANCE_ID | grep -q running; do echo 'checking...'; sleep $SLEEP; done" \
|| error_exit "controller server didn't become active within $RUNNING_TIMEOUT seconds"

echo ''
echo "Classroom: Waiting for the instance to have state 'running'..."
timeout $RUNNING_TIMEOUT sh -c "while ! euca-describe-instances $CLASSROOM_INSTANCE_ID | grep -q running; do echo 'checking...'; sleep $SLEEP; done" \
|| error_exit "classroom server didn't become active within $RUNNING_TIMEOUT seconds"

echo ''
echo "Controller: Tagging new instance $CONTROLLER_INSTANCE_ID with tag tw-usage=$TAG_VAL..."
euca-create-tags --tag tw-usage=$TAG_VAL $CONTROLLER_INSTANCE_ID

echo ''
echo "Controller: Tagging new instance $CONTROLLER_INSTANCE_ID with tag Name=$SERVER-controller..."
euca-create-tags --tag Name="$SERVER-controller" $CONTROLLER_INSTANCE_ID

echo ''
echo "Classroom: Tagging new instance $CLASSROOM_INSTANCE_ID with tag tw-usage=$TAG_VAL..."
euca-create-tags --tag tw-usage=$TAG_VAL $CLASSROOM_INSTANCE_ID

echo ''
echo "Classroom: Tagging new instance $CLASSROOM_INSTANCE_ID with tag Name=$SERVER-classroom..."
euca-create-tags --tag Name="$SERVER-classroom" $CLASSROOM_INSTANCE_ID

echo ''
echo 'Controller: Associating the elastic IP with the new instance...'
euca-associate-address -i $CONTROLLER_INSTANCE_ID $CONTROLLER_IP_ADDRESS

echo ''
echo 'Classroom: Associating the elastic IP with the new instance...'
euca-associate-address -i $CLASSROOM_INSTANCE_ID $CLASSROOM_IP_ADDRESS

echo ''
echo 'Grabbing the internal controller host name...'
CONTROLLER_INTERNAL_HOST=`euca-describe-instances $CONTROLLER_INSTANCE_ID | grep internal | cut -f 5`
echo "$CONTROLLER_INTERNAL_HOST"

echo ''
echo 'Grabbing the internal classroom host name...'
CLASSROOM_INTERNAL_HOST=`euca-describe-instances $CLASSROOM_INSTANCE_ID | grep internal | cut -f 5`
echo "$CLASSROOM_INTERNAL_HOST"

echo ''
echo 'Assembling the Ansible inventory file to talk to the controller...'
echo "$CONTROLLER_INTERNAL_HOST" > $BASE_DIR/ec2-hostname
cat $BASE_DIR/ec2-hostname

echo ''
echo "Waiting for the instance to actually accept ssh connections..."
timeout $RUNNING_TIMEOUT sh -c "while ! ssh ubuntu@$CONTROLLER_INTERNAL_HOST 'whoami' | grep 'ubuntu'; do echo 'checking...'; sleep $SLEEP; done" \
|| error_exit "server didn't start after $RUNNING_TIMEOUT seconds"

echo ''
echo "Waiting for the instance to gain internal networking..."
timeout $RUNNING_TIMEOUT sh -c "while ! ssh ubuntu@$CONTROLLER_INTERNAL_HOST 'ping -c4 $REGION.ec2.archive.ubuntu.com' | grep '64 bytes from'; do echo 'checking...'; sleep $SLEEP; done" \
|| error_exit "server internal networking didn't start after $RUNNING_TIMEOUT seconds"

echo ''
echo "Waiting for the instance to gain external networking..."
timeout $RUNNING_TIMEOUT sh -c "while ! ssh ubuntu@$CONTROLLER_INTERNAL_HOST 'ping -c4 security.ubuntu.com' | grep '64 bytes from'; do echo 'checking...'; sleep $SLEEP; done" \
|| error_exit "server external networking didn't start after $RUNNING_TIMEOUT seconds"

echo ''
echo "Running initial build and setup phase playbook..."
cd $BASE_DIR/provision
ansible-playbook $ANS_ARGS ./prep-server.yml --extra-vars "hostname=$CONTROLLER_PUBLIC_HOST branch=$BRANCH" || error_exit "Initial build playbook failed."

echo ''
echo 'Copying the settings files for the controller playbooks...'
cp $BASE_DIR/provision/$SERVER-controller-settings-ec2.yml $BASE_DIR/../playbooks/controller/settings.yml

echo ''
echo 'Running controller setup...'
cd $BASE_DIR/../playbooks/controller
ansible-playbook $ANS_ARGS setup.yml --extra-vars "mongo_root_password=$MONGO_ROOT_PASSWORD mongo_app_password=$MONGO_APP_PASSWORD app_pass=$APP_PASSWORD"  || error_exit "Controller playbook failed."

if [ "$SERVER" == 'build' ]; then
  echo ''
  echo "Setup the bender user so we can update checkout on every commit to the branch..."
  cd $BASE_DIR/provision
  ansible-playbook $ANS_ARGS ./bender-setup.yml --extra-vars "branch=$BRANCH"  || error_exit "Bender user setup failed."
fi

echo ''
echo 'Running sample data playbook setup...'
cd $BASE_DIR/../playbooks/controller
ansible-playbook $ANS_ARGS sample-data.yml --extra-vars "classroom_hostname=$CLASSROOM_PUBLIC_HOST mongo_app_password=$MONGO_APP_PASSWORD remote_username=ubuntu twdir=$TW_DIR" || error_exit "Sample data setup failed."

echo ''
echo 'Fetch the generated public key from the controller...'
cd $BASE_DIR/provision
ansible-playbook $ANS_ARGS fetch-key.yml || error_exit "Could not fetch the public key from the controller"
cat ./tw.key.pub/"$CONTROLLER_INTERNAL_HOST"/var/trainingwheels/keypairs/tw.key.pub
mv ./tw.key.pub/"$CONTROLLER_INTERNAL_HOST"/var/trainingwheels/keypairs/tw.key.pub $BASE_DIR/provision-classroom/tw.key.pub

echo ''
echo 'Assembling the Ansible inventory file for classroom setup...'
echo "$CLASSROOM_INTERNAL_HOST" > $BASE_DIR/ec2-hostname
cat $BASE_DIR/ec2-hostname

echo ''
echo 'Run the classroom server setup...'
cd $BASE_DIR/provision-classroom
ansible-playbook $ANS_ARGS prep-classroom.yml --extra-vars "hostname=$CLASSROOM_PUBLIC_HOST" || error_exit "Could not run the classroom setup"

echo ''
echo 'done.'
echo ''
