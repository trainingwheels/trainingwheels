#!/bin/bash

# Pull in file containing variables to be used in this build.
VARS_FILE="$1"

if [ -z "$VARS_FILE" ]; then
  echo "Please pass a variable file as a parameter. See ec-params.sample to get started."
  exit 1
fi

if [ ! -f "$VARS_FILE" ]; then
  echo "The variable file '$VARS_FILE' was not found."
  exit 1
fi

source "$VARS_FILE"

# The following are common vars that could be moved into other build-specific files if required.
KEY_NAME='tw'
RUNNING_TIMEOUT='300'
INSTANCE_TYPE='m1.small'
REGION='us-east-1'
BASE_DIR=`pwd`
AMI='ami-3d4ff254'
ID_FILE="${HOME}/.ssh/tw.pem"
ANS_ARGS="-c ssh -s --timeout=$RUNNING_TIMEOUT --private-key=$ID_FILE --inventory-file=$BASE_DIR/ec2-hostname"
SLEEP='3'

# If Ansible ever gets a good euca2ools module, we may be able to move some of this out of bash.
echo ''
echo 'Finding all existing build instances...'
OBSOLETE_INSTANCES=`euca-describe-instances --filter tag-value=$TAG_VAL | grep INSTANCE | cut -f 2`

echo ''
echo "The following instances will be terminated:"
echo "$OBSOLETE_INSTANCES"
euca-terminate-instances $OBSOLETE_INSTANCES

echo ''
echo "Waiting for all build instances to be shut down..."
if ! timeout $RUNNING_TIMEOUT sh -c "while euca-describe-instances --filter tag-value=$TAG_VAL | grep INSTANCE | grep -qv terminated; do echo 'checking...'; sleep $SLEEP; done"; then
  echo "server didn't shutdown within $RUNNING_TIMEOUT seconds"
  exit 1
fi

echo ''
echo 'Creating new instance...'
NEW_INSTANCE_ID=`euca-run-instances --key $KEY_NAME --region $REGION --instance-type $INSTANCE_TYPE --group default $AMI | grep INSTANCE | cut -f 2`

echo ''
echo "Waiting for the instance to have state 'running'..."
if ! timeout $RUNNING_TIMEOUT sh -c "while ! euca-describe-instances $NEW_INSTANCE_ID | grep -q running; do echo 'checking...'; sleep $SLEEP; done"; then
  echo "server didn't become active within $RUNNING_TIMEOUT seconds"
  exit 1
fi

echo ''
echo "Tagging new instance $NEW_INSTANCE_ID with tag $TAG_VAL..."
euca-create-tags --tag tw-usage=$TAG_VAL $NEW_INSTANCE_ID

echo ''
echo 'Associating the elastic IP with the new instance...'
euca-associate-address -i $NEW_INSTANCE_ID $IP_ADDRESS

echo ''
echo 'Grabbing the internal host name if required, else the external...'
if [ "$EC2_EXTERNAL" == 'internal' ]; then
  HOST=`euca-describe-instances $NEW_INSTANCE_ID | grep internal | cut -f 5`
else
  HOST="$EC2_EXTERNAL"
fi
echo "$HOST" > $BASE_DIR/ec2-hostname
echo "$HOST"

echo ''
echo "Waiting for the instance to actually accept ssh connections..."
if ! timeout $RUNNING_TIMEOUT sh -c "while ! ssh ubuntu@$HOST 'whoami' | grep 'ubuntu'; do echo 'checking...'; sleep $SLEEP; done"; then
  echo "server didn't start after $RUNNING_TIMEOUT seconds"
  exit 1
fi

echo ''
echo "Waiting for the instance to gain internal networking..."
if ! timeout $RUNNING_TIMEOUT sh -c "while ! ssh ubuntu@$HOST 'ping -c4 $REGION.ec2.archive.ubuntu.com' | grep '64 bytes from'; do echo 'checking...'; sleep $SLEEP; done"; then
  echo "server internal networking didn't start after $RUNNING_TIMEOUT seconds"
  exit 1
fi

echo ''
echo "Waiting for the instance to gain external networking..."
if ! timeout $RUNNING_TIMEOUT sh -c "while ! ssh ubuntu@$HOST 'ping -c4 security.ubuntu.com' | grep '64 bytes from'; do echo 'checking...'; sleep $SLEEP; done"; then
  echo "server external networking didn't start after $RUNNING_TIMEOUT seconds"
  exit 1
fi

echo ''
echo "Running initial build and setup phase playbook..."
cd $BASE_DIR/provision
if ! ansible-playbook $ANS_ARGS ./prep-server.yml --extra-vars "server=$SERVER branch=$BRANCH"; then
  exit 1
fi

echo ''
echo 'Copying the settings files for the controller playbooks...'
cp $BASE_DIR/provision/$SERVER-controller-settings-ec2.yml $BASE_DIR/../playbooks/controller/settings.yml

echo ''
echo 'Running controller setup...'
cd $BASE_DIR/../playbooks/controller
if ! ansible-playbook $ANS_ARGS setup.yml --extra-vars "mongo_root_password=$MONGO_ROOT_PASSWORD mongo_app_password=$MONGO_APP_PASSWORD app_pass=$APP_PASSWORD"; then
  exit 1
fi

if [ "$SERVER" == 'build' ]; then
  echo ''
  echo "Setup the bender user so we can update checkout on every commit to the branch..."
  cd $BASE_DIR/provision
  if ! ansible-playbook $ANS_ARGS ./bender-setup.yml --extra-vars "branch=$BRANCH"; then
    exit 1
  fi
fi

echo ''
echo 'Running sample data playbook setup...'
cd $BASE_DIR/../playbooks/controller
if ! ansible-playbook $ANS_ARGS sample-data.yml --extra-vars "mongo_app_password=$MONGO_APP_PASSWORD"; then
  exit 1
fi

echo ''
echo 'done.'
echo ''
