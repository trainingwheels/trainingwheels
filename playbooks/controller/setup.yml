##
# Ansible playbook for setting up a Training Wheels controller on an
# Ubuntu 12.04 server.
#

---
- hosts: all
  gather_facts: False

  vars:
    twdir: '/var/trainingwheels'
    phpfpm_home: '/home/phpfpm'

  vars_files:
    - settings.yml

  tasks:
    ##
    # Add ansible repository
    - name: Add ansible repository
      action: apt_repository repo=ppa:rquillo/ansible/ubuntu state=present

    - name: Update the apt cache for the new repository
      action: apt update-cache=yes

    ##
    # Setup a user for nginx.
    #
    - name: Nginx | Create nginx group
      action: group name=nginx system=yes

    - name: Nginx | Create a user for nginx otherwise www-data is shared with Apache
      action: user name=nginx group=nginx createhome=no system=yes shell=/bin/false

    ##
    # Setup a user for php-fpm. We require the user to have a home directory, so that
    # we can execute ansible playbooks locally, either running against and configuring the current
    # machine (in the case of classroom being on same machine as controller) or configuring
    # a remote machine.
    #
    - name: PHP-FPM | Create phpfpm group
      action: group name=phpfpm system=yes

    - name: PHP-FPM | Create a user for phpfpm
      action: user name=phpfpm group=phpfpm createhome=yes home=$phpfpm_home system=yes shell=/bin/false

    - name: PHP-FPM | Create phpfpm home
      action: file path=$phpfpm_home state=directory owner=phpfpm group=phpfpm mode=700

    ##
    # Apt package installation of required software.
    #
    - name: All | Install required packages.
      action: apt pkg=$item state=installed
      with_items:
        - nginx
        - php5-fpm
        - php5-intl
        - unzip
        - php-apc
        - php5-xmlrpc
        - php-soap
        - php5-gd
        - php-pear
        - python-mysqldb
        - curl
        - build-essential
        - ansible

    - name: Copy ansible hosts file
      action: copy src=files/etc-ansible-hosts dest=/etc/ansible/hosts

    ##
    # Configuration for php-fpm
    #
    - name: PHP-FPM | Configure php-fpm
      action: template src=templates/etc-php5-fpm-pool-d-www-conf.j2 dest=/etc/php5/fpm/pool.d/www.conf

    - name: PHP-FPM | PHP configuration file php.ini for php-fpm
      action: template src=templates/etc-php5-fpm-php-ini.j2 dest=/etc/php5/fpm/php.ini

    - name: PHP-FPM | PHP configuration file for CLI
      action: template src=templates/etc-php5-cli-php-ini.j2 dest=/etc/php5/cli/php.ini

    - name: PHP-FPM | Sudoers file allowing the phpfpm user to administer the server
      action: copy src=files/etc-sudoers-d-phpfpm dest=/etc/sudoers.d/phpfpm mode=0440

    - name: PHP-FPM | APC cache configuration file apc.ini
      action: template src=templates/etc-php5-conf-d-apc-ini.j2 dest=/etc/php5/conf.d/apc.ini

    ##
    # Configuration for MongoDB database
    #
    - name: MongoDB | Add the key
      action: command apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10

    - name: MongoDB | Add the MongoDB repo
      action: copy src=files/etc-apt-sources-list-d-mongodb-list dest=/etc/apt/sources.list.d/mongodb.list

    - name: MongoDB | Update the apt cache for the new repository
      action: apt update-cache=yes

    - name: MongoDB | Install Mongo
      action: apt pkg=$item state=installed
      with_items:
        - mongodb-10gen

    - name: MongoDB | Wait for Mongo to be listening for connections. It preallocates some space that takes a while.
      action: wait_for port=27017 delay=4 timeout=$mongo_restart_timeout

    - name: MongoDB | Install pymongo
      action: pip name=pymongo state=present

    - name: MongoDB | Create root user
      action: mongodb_user database=admin user=root password=$mongo_root_password

    - name: MongoDB | Create app user
      action: mongodb_user database=trainingwheels user=trainingwheels password=$mongo_app_password

    - name: MongoDB | Configuration file mongodb.conf
      action: template src=templates/etc-mongodb-conf.j2 dest=/etc/mongodb.conf

    - name: MongoDB | .mongodb.cnf for root
      action: template src=templates/root-mongodb-cnf.j2 dest=/root/.mongodb.cnf

    - name: MongoDB | Get the current users home
      action: shell echo $HOME
      register: user_home

    - name: MongoDB | .mongodb.cnf for admin user
      action: template src=templates/root-mongodb-cnf.j2 dest=${user_home.stdout}/.mongodb.cnf

    - name: MongoDB | Install the PECL MongoDB extension
      action: command pecl install mongo creates=/usr/lib/php5/20090626/mongo.so

    - name: MongoDB | Configure PHP to use PECL MongoDB extension
      action: copy dest=/etc/php5/conf.d/mongo.ini src=files/etc-php5-conf-d-mongo-ini

    ##
    # Node.js install.
    #
    - name: Node.js | Package prerequisites for node.js
      action: apt pkg=python-software-properties state=installed

    - name: Node.js | Add the node.js PPA
      action: command add-apt-repository -y ppa:chris-lea/node.js creates=/etc/apt/sources.list.d/chris-lea-node_js-precise.list

    - name: Node.js | Update the apt cache for the new repository
      action: apt update-cache=yes

    - name: Node.js | Install nodejs and npm
      action: apt pkg=$item state=installed
      with_items:
        - nodejs
        - npm

    - name: Node.js | Install forever
      action: command npm install -g forever creates=/usr/local/bin/forever

    ##
    # Configuration for nginx
    #
    - name: Nginx | Add mime types for nginx including our font type WOFF
      action: copy src=files/etc-nginx-mime-types dest=/etc/nginx/mime.types

    - name: Nginx | Configure nginx
      action: template src=templates/etc-nginx-nginx-conf.j2 dest=/etc/nginx/nginx.conf

    - name: Nginx | Remove default site
      action: file path=/etc/nginx/sites-enabled/default state=absent

    - name: Nginx | Copy our nginx site configuration
      action: template src=templates/etc-nginx-sites-available-twcontrol.j2 dest=/etc/nginx/sites-available/twcontrol

    - name: Nginx | Make site available
      action: file dest=/etc/nginx/sites-enabled/twcontrol state=link src=/etc/nginx/sites-available/twcontrol

    ##
    # Install Composer to build Training Wheels
    #
    - name: Composer | Install Composer - create directory
      action: file path=/usr/local/bin state=directory owner=root group=root

    - name: Composer | Install Composer
      action: shell curl -s https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin creates=/usr/local/bin/composer.phar

    - name: Composer | Install dependencies
      action: command composer.phar install -d $twdir/controller/ creates=$twdir/controller/vendor

    ##
    # Copy app config file.
    #
    - name: Copy app config file
      action: template src=templates/var-trainingwheels-controller-config-config-yml.j2 dest=$twdir/controller/config/config.yml

    ##
    # Sentinel setup
    #
    - name: Daemonize sentinel
      action: template src=templates/etc-init-tw-sentinel-conf dest=/etc/init/tw-sentinel.conf

    - name: Start sentinel
      action: service name=tw-sentinel state=started

    ##
    # Handy shortcuts
    #
    - name: Training Wheels | Link to the webroot
      action: file state=link src=$twdir/controller/web dest=$admin_user_home/tw-webroot

    - name: Training Wheels | Link to the CLI application
      action: file state=link src=$twdir/controller/cli/tw dest=/usr/local/bin/tw

    - name: Training Wheels | Link to the Training Wheels directory
      action: file state=link src=$twdir dest=$admin_user_home/trainingwheels

    - name: Training Wheels | Link to the log directory
      action: file state=link src=$twdir/controller/log dest=$admin_user_home/tw-log

    ##
    # Restart services
    #
    - name: Restart nginx
      action: service name=nginx state=restarted

    - name: Restart php-fpm
      action: service name=php5-fpm state=restarted

    - name: Restart Mongo
      action: service name=mongodb state=restarted
